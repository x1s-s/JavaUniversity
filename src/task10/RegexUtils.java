package task10;

import java.util.regex.Pattern;

/*
Вариант 18
2 3 5 6 7
2: Написать регулярное выражение определяющее является ли данная строчка GUID с или без скобок.
   Где GUID это строчка, состоящая из 8, 4, 4, 4, 12 шестнадцатеричных цифр разделенных тире.

3: Написать регулярное выражение определяющее является ли заданная строка правильным MAC-адресом.

5: Написать регулярное выражение определяющее является ли данная строчка датой в формате dd/mm/yyyy. Начиная с 1600 года до 9999 года

6: Написать регулярное выражение определяющее является ли данная строчка валидным E-mail

7: Составить регулярное выражение, является ли заданная строчка IP адресом, записанным в десятичном виде
*/

public class RegexUtils {
  public static boolean isGUID(String str){
    return  Pattern.compile("^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$").matcher(str).find();
  }

  public static boolean isMAC(String str){
    return  Pattern.compile("^(?:[0-9A-Fa-f]{2}[:-]){5}(?:[0-9A-Fa-f]{2})$").matcher(str).find();
  }

  public static boolean isDate(String str){
    String dateRegex = "^(29/02/(2000|2400|2800|(19|2[0-9])(0[48]|[2468][048]|[13579][26])))$"
        + "|^(((0[1-9]|1[0-9]|2[0-8])-02-(19|2[0-9])[0-9]{2}))$"
        + "|^((0[1-9]|[12][0-9]|3[01])/(0[13578]|10|12)/((19|2[0-9])[0-9]{2}))$"
        + "|^(((0[1-9]|[12][0-9]|30)/(0[469]|11)/(19|2[0-9])[0-9]{2}))$";
    return  Pattern.compile(dateRegex).matcher(str).find();
  }
  public static boolean isEmail(String str){
    return  Pattern.compile("^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$").matcher(str).find();
  }

  public static boolean isIP(String str){
    return  Pattern.compile("^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$").matcher(str).find();
  }



}
